apply plugin: 'java'

group 'com.encom'
version '1.0.0'

sourceCompatibility = 17
targetCompatibility = 17

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.2'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.1'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.1.1'
    testImplementation 'org.assertj:assertj-core:3.24.2'
}

// Create fat JAR with all dependencies using built-in Gradle tasks
task fatJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('all')
    
    manifest {
        attributes 'Main-Class': 'com.encom.mapgen.handler.MapGeneratorHandler'
    }
    
    // Include compiled classes
    from sourceSets.main.output
    
    // Include all runtime dependencies
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    // Exclude signature files to avoid security exceptions
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.MF'
    
    // Handle duplicate files by taking the first one
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    useJUnit()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Build task depends on fatJar instead of regular jar
build.dependsOn fatJar

// Optional: Create deployment ZIP
task buildZip(type: Zip, dependsOn: fatJar) {
    from fatJar
    archiveFileName.set("${project.name}-${project.version}.zip")
}